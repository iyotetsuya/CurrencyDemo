// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.recyclerview_version = '1.1.0-beta03'
    ext.fragment_ktx_version = '1.2.0-alpha02'
    ext.constraintlayout_version = '2.0.0'
    ext.core_version = '1.2.0-alpha03'
    ext.appcompat_version = '1.1.0-rc01'
    ext.kotlin_version = '1.3.50'
    ext.lifecycle_version = '2.2.0-alpha03'
    ext.dagger_version = '2.24'
    ext.retrofit_version = '2.5.0'
    ext.room_version = '2.4.1'
    ext.retrofit_version = '2.6.1'
    ext.gson_version = '2.8.5'
    ext.logging_version = '4.1.0'
    ext.safe_args_version = '2.3.5'
    ext.mockito_version = '2.22.0'
    ext.junit_version = '4.12'
    ext.core_testing_version = '2.0.1'
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.1.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$safe_args_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id 'jacoco'
    id 'com.github.nbaztec.coveralls-jacoco' version '1.2.13'
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// ignore any subproject, if required `subprojects.findAll{ it.name != 'customSubProject' }`
def coveredProjects = subprojects

// configure() method takes a list as an argument and applies the configuration to the projects in this list.
configure(coveredProjects) { p ->
    p.evaluate()

    // Here we apply jacoco plugin to every project
    apply plugin: 'jacoco'
    // Set Jacoco version
    jacoco {
        toolVersion = "0.8.5"
    }

    // Here we create the task to generate Jacoco report
    // It depends to unit test task we don't have to manually running unit test before the task
    task jacocoReport(type: JacocoReport, dependsOn: 'test') {

        // Define what type of report we should generate
        // If we don't want to process the data further, html should be enough
        reports {
            xml.required.set(true)
            html.required.set(true)
        }

        // Setup the .class, source, and execution directories
        final fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', 'android/**/*.*']

        sourceDirectories.setFrom files(["${p.projectDir}/src/main/java"])
        classDirectories.setFrom files([
                fileTree(dir: "${p.buildDir}/classes", excludes: fileFilter),
                fileTree(dir: "${p.buildDir}/intermediates/javac/debug", excludes: fileFilter),
                fileTree(dir: "${p.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter),
        ])
        executionData.setFrom fileTree(dir: p.buildDir, includes: [
                'jacoco/*.exec', 'outputs/code-coverage/connected/*coverage.ec'
        ])
    }
}

apply plugin: 'jacoco'
apply plugin: 'com.github.nbaztec.coveralls-jacoco'

task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
    def projects = coveredProjects

    // Here we depend on the jacocoReport task that we created before
    dependsOn(projects.jacocoReport)

    final source = files(projects.jacocoReport.sourceDirectories)

    additionalSourceDirs.setFrom source
    sourceDirectories.setFrom source

    classDirectories.setFrom files(projects.jacocoReport.classDirectories)
    executionData.setFrom files(projects.jacocoReport.executionData)

    reports {
        html {
            required.set(true)
            destination file("$buildDir/reports/jacoco/html")
        }
        xml {
            required.set(true)
            destination file("$buildDir/reports/jacoco/jacocoFullReport.xml")
        }
    }

    doFirst {
        executionData.setFrom files(executionData.findAll { it.exists() })
    }

    coverallsJacoco {
        reportPath = "$buildDir/reports/jacoco/jacocoFullReport.xml"
        reportSourceSets = projects.jacocoReport.sourceDirectories.collect { it.getFiles() }.flatten()
    }

    tasks.coverallsJacoco.dependsOn(it)
}
